{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".faiza - faiza.khurshid@uni-bonn.com\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Exercise 1 (Recursion, 10 Points)\n",
    "• Given the function below, answer the following questions.\n",
    "\n",
    "\n",
    "a) What does the recurse(n, s) function compute? (3P)\n",
    "\n",
    "b) What would happen if you call this function like recurse(−1, 0)? (2P)\n",
    "\n",
    "\n",
    "• Write a recursive function to compute the result of polynomial p(x) = a0 +a1x+a2x\n",
    "2 +...+anx\n",
    "n\n",
    "for given polynomial p, that is defined as a list of coefficients of p, i.e., p = [a0, a1, ..., an], and x\n",
    "as input. (5P)\n",
    "\n",
    "\n",
    "Hint: A polynomial can be written as p(x) = a0 + x(a1 + a2x + .. + anx^n-1)\n",
    "\u0001\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# a) What does the recurse(n, s) function compute? (3P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "# this recursive function compute the summation of natural numbers n and add it to s and . \n",
    "#following is example, when n==0 it will return s\n",
    "def recurse(n,s):\n",
    "     return s if n==0 else recurse(n-1,n+s)\n",
    "print(recurse(5,0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# b) What would happen if you call this function like recurse(−1, 0)? (2P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "ename": "RecursionError",
     "evalue": "maximum recursion depth exceeded in comparison",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mRecursionError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-175-62f3cd8f9d31>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrecurse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m '''it gives me recursionError because of infinite recursion or its means this function exceeds Pythons built in recursion limit,\n\u001b[0;32m      4\u001b[0m \u001b[0mso\u001b[0m \u001b[0mwe\u001b[0m \u001b[0mcannot\u001b[0m \u001b[0mchoose\u001b[0m \u001b[0mnegative\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0mof\u001b[0m \u001b[0mn\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mthis\u001b[0m \u001b[0mfunction\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m '''\n",
      "\u001b[1;32m<ipython-input-173-904f507e9d9d>\u001b[0m in \u001b[0;36mrecurse\u001b[1;34m(n, s)\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# this recursive function compute the summation of natural numbers n and add it to s. following is the example\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0ms\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m      \u001b[1;32mreturn\u001b[0m \u001b[0ms\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mn\u001b[0m\u001b[1;33m==\u001b[0m\u001b[1;36m0\u001b[0m \u001b[1;32melse\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m+\u001b[0m\u001b[0ms\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrecurse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "... last 1 frames repeated, from the frame below ...\n",
      "\u001b[1;32m<ipython-input-173-904f507e9d9d>\u001b[0m in \u001b[0;36mrecurse\u001b[1;34m(n, s)\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# this recursive function compute the summation of natural numbers n and add it to s. following is the example\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0ms\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m      \u001b[1;32mreturn\u001b[0m \u001b[0ms\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mn\u001b[0m\u001b[1;33m==\u001b[0m\u001b[1;36m0\u001b[0m \u001b[1;32melse\u001b[0m \u001b[0mrecurse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m+\u001b[0m\u001b[0ms\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrecurse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mRecursionError\u001b[0m: maximum recursion depth exceeded in comparison"
     ]
    }
   ],
   "source": [
    "print(recurse(-1,0))\n",
    "\n",
    "'''it gives me error because of infinite recursion or its means this function exceeds Pythons built in recursion limit,\n",
    "so we cannot choose negative value of n for this function.\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Write a recursive function to compute the result of polynomial\n",
    "p(x) = a0 +a1x+a2x^2 +...+anx^n\n",
    "\n",
    "for given polynomial p, that is defined as a list of coefficients of p, i.e., p = [a0, a1, ..., an], and x\n",
    "\n",
    "as input. (5P)\n",
    "\n",
    "\n",
    "\n",
    "\u0001\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n"
     ]
    }
   ],
   "source": [
    "def polynomialR(p,degree,x):\n",
    "    if degree == 0 :\n",
    "        return p[0]\n",
    "    else : \n",
    "        return  p[degree] + x * polynomialR(p, degree-1, x)\n",
    "p = [2, 1, 0, 5] \n",
    "x=2\n",
    "print(polynomialR(p,len(p)-1,x))   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 2 (Filtering and Sorting, 5 Points)\n",
    "Write Python code that filters a given list of strings to retain only those elements that contain ’CA’.\n",
    "Sort the resulting list by string length. Strings with equal length should be sorted by how often the\n",
    "letter ’A’ occurs in them, so that the ones with the largest number of As come first. Test your code\n",
    "with the following two lists:\n",
    "\n",
    "\n",
    "L1 = [’UTACG’, ’TUCAG’, ’ACAG’, ’GAA’, ’CA’, ’TUAGCAU’, ’ACAAAAA’]\n",
    "\n",
    "\n",
    "L2 = [’ACAGT’, ’CAGAA’, ’GACT’, ’ACAGTAGA’, ’AACGTAAAA’]\n",
    "\n",
    "\n",
    "Hint: Lambda function can be used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['CA', 'ACAG', 'TUCAG', 'ACAAAAA', 'TUAGCAU']\n",
      "['CAGAA', 'ACAGT', 'ACAGTAGA']\n"
     ]
    }
   ],
   "source": [
    "def filter_sort(L):\n",
    "   #filter the list\n",
    "    filter_list=[i for i in L if 'CA' in i]\n",
    "    #sort the list\n",
    "    sorted_list=sorted(filter_list,key=lambda x: (len(x),-x.count('A')))\n",
    "    return sorted_list\n",
    "\n",
    "L1 = [\"UTACG\", \"TUCAG\", \"ACAG\", \"GAA\", \"CA\", \"TUAGCAU\", \"ACAAAAA\"]\n",
    "L2 = [\"ACAGT\", \"CAGAA\", \"GACT\", \"ACAGTAGA\", \"AACGTAAAA\"]\n",
    "print(filter_sort(L1))\n",
    "print(filter_sort(L2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 3 (Statistical Data Analysis, 10 Points)\n",
    "\n",
    "You are given the following data set, that contains information about student’s performance in a math\n",
    "course. The table also contains the hours per week, that each student spent on studying and on social\n",
    "media.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# a) Translate the table above into a Python object so that you can access the information in the form student[StudentID].attribute.\n",
    "For example, student[105].grade should yield 2.7 (3P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.7\n"
     ]
    }
   ],
   "source": [
    "from collections import namedtuple\n",
    "data=namedtuple('studentID','grade,studyHrs,stimeSpentOnSocialMedia')\n",
    "student={105: data(2.7,2.5,4.5), \n",
    "         114: data(3.6,1.0,7.0),\n",
    "         117: data(1.2,5.0,4.0),\n",
    "         121: data(1.0,7.0,5.0),\n",
    "         135: data(2.3,3.5,4.0),\n",
    "         148: data(4.0,0.58,8.0),\n",
    "         155: data(2.5,3.0,6.5)}\n",
    "\n",
    "print(student[105].grade)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Write a function to compute the mean of a list of data, and use it to compute the mean of each of the given columns. (2P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "# following code is make the list of each column\n",
    "\n",
    "grade_list=[]\n",
    "studyhr_list=[]\n",
    "media_list=[]\n",
    "\n",
    "for i in student:\n",
    "    x=list(student[i])\n",
    "    grade_list.append(x[0])\n",
    "    studyhr_list.append(x[1])\n",
    "    media_list.append(x[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean of grade_list is 2.4714285714285715\n",
      "mean of studyhr_list is 3.2257142857142855\n",
      "mean of media_list is 5.571428571428571\n"
     ]
    }
   ],
   "source": [
    "def mean(d):\n",
    "    mean=sum(d)/(len(d))\n",
    "    return mean\n",
    "    \n",
    "print('mean of grade_list is',mean(grade_list))\n",
    "print('mean of studyhr_list is',mean(studyhr_list))\n",
    "print('mean of media_list is',mean(media_list))   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# c) Write a function to compute the standard deviation using the mean function in part b). (2P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0333223611442928\n"
     ]
    }
   ],
   "source": [
    "def Sd(d):\n",
    "    v= sum([(xi - mean(d)) ** 2 for xi in d])/len(d)\n",
    "    sd_result=v**0.5\n",
    "    return sd_result\n",
    "print(sd(grade_list))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# d) The Pearson correlation coefficient is used to measure the strength of a linear association between two variables, where the value r = 1 means a perfect positive correlation and the value r = -1means a perfect negative correlation. Write a function to compute Pearson correlation between two input lists x and y using the following formula. (2P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pcc(x,y):\n",
    "    r=sum((i- mean(x)) * (j - mean(y)) for (i,j) in zip(x,y))/(len(x)* sd(x)* sd(y))\n",
    "    return r "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Use your function to find the variable that correlates with the student grades the most. (1P)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grade and studyhr -0.9739986592634156\n",
      "grade and media  0.7702987145839846\n"
     ]
    }
   ],
   "source": [
    "print('grade and studyhr',pcc(studyhr_list,grade_list))\n",
    "print('grade and media ', pcc(media_list,grade_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# studyhrs variable is most correlated with student grades,it shows the strong negative relationship"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
